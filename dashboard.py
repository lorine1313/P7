# -*- coding: utf-8 -*-
"""dashboard.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17SbFkn6XU1PMJldndLZtbown4w8I7PEE
"""

import pandas as pd
import streamlit as st
import numpy as np
from flask import Flask, jsonify, json
import plotly.graph_objects as go
from flask import Flask, render_template, jsonify
import json
import requests
import matplotlib.pyplot as plt
import plotly.express as px

app = Flask(__name__)
# Chargement du df
df = pd.read_csv('appli_train_3.csv', index_col='SK_ID_CURR')
df1=df.loc[:,['AMT_INCOME_TOTAL','AMT_ANNUITY','AMT_CREDIT','CNT_CHILDREN','CNT_FAM_MEMBERS','CODE_GENDER_F','CODE_GENDER_M','DAYS_BIRTH', 'DAYS_EMPLOYED', 'EXT_SOURCE_3',
    'EXT_SOURCE_2','EXT_SOURCE_1','NAME_INCOME_TYPE_Businessman','NAME_INCOME_TYPE_Commercial associate','NAME_INCOME_TYPE_Maternity leave','NAME_INCOME_TYPE_Pensioner','NAME_INCOME_TYPE_State servant','NAME_INCOME_TYPE_Student','NAME_INCOME_TYPE_Unemployed','NAME_INCOME_TYPE_Working', 'NAME_FAMILY_STATUS_Civil marriage','NAME_FAMILY_STATUS_Married','NAME_FAMILY_STATUS_Separated','NAME_FAMILY_STATUS_Single / not married','NAME_FAMILY_STATUS_Unknown','NAME_FAMILY_STATUS_Widow', 'OCCUPATION_TYPE_Accountants','OCCUPATION_TYPE_Cleaning staff','OCCUPATION_TYPE_Cooking staff','OCCUPATION_TYPE_Core staff','OCCUPATION_TYPE_Drivers','OCCUPATION_TYPE_HR staff','OCCUPATION_TYPE_High skill tech staff','OCCUPATION_TYPE_IT staff','OCCUPATION_TYPE_Laborers','OCCUPATION_TYPE_Low-skill Laborers','OCCUPATION_TYPE_Managers','OCCUPATION_TYPE_Medicine staff','OCCUPATION_TYPE_Private service staff','OCCUPATION_TYPE_Realty agents','OCCUPATION_TYPE_Sales staff','OCCUPATION_TYPE_Secretaries','OCCUPATION_TYPE_Security staff','OCCUPATION_TYPE_Waiters/barmen staff']]

df1['AGE']= (df1['DAYS_BIRTH'].values / -365).astype(int)
df1['TAUX_ENDETTEMENT']=df1['AMT_CREDIT']/df1['AMT_INCOME_TOTAL']
df1['CAPACITE_REMBOURSEMENT']=df1['AMT_INCOME_TOTAL']*0.35-df1['AMT_ANNUITY']
df1['DAYS_EMPLOYED_PERCENT'] = df1['DAYS_EMPLOYED'] / df1['DAYS_BIRTH']

df=df1

def pret():
    # API
    @st.cache(allow_output_mutation=True)
    def load_data():
        response = requests.get(url)
        content = json.loads(response.content.decode('utf-8'))
        data= pd.DataFrame(content['data'])
        return data
        
    load_info = df
    #infos = infos[['AGE', 'GENDER','FAMILY STATUS', 'EDUCATION TYPE', 
    #'OCCUPATION TYPE','YEARS EMPLOYED', 'YEARLY INCOME', 'GOODS PRICE',
    #'AMOUNT CREDIT', 'AMOUNT ANNUITY']]

    # Affichage des infos clients
    st.title("Prêt à dépenser : développer un modèle de scoring")
    st.sidebar.subheader("Informations client")
    id_clt = st.sidebar.selectbox("Identifiant Client:", load_info.index)
    def load_moyenne():

        infos_1 = [df_client.shape[0],
                 round(df_client["AMT_INCOME_TOTAL"].mean(), 2),
                 round(df_client["AMT_CREDIT"].mean(), 2)]
        print(infos_1)
        nb_credits = infos_1[0]
        salaire_moy = infos_1[1]
        credits_moy = infos_1[2]

        return nb_credits, salaire_moy, credits_moy

    st.header("Informations client")
    df_client=pd.DataFrame
    df_client = df[df.index==id_clt]
    #print(df_client)
    #print((df_client['NAME_INCOME_TYPE_Businessman']).item())
    st.write("Client :", id_clt)
    st.write("Age :", df_client['AGE'])
    if df_client['NAME_INCOME_TYPE_Businessman'].item()==1.0:
        incometype='Businessman'
    if df_client['NAME_INCOME_TYPE_Commercial associate'].item()==1.0:
        incometype='Commercial associate'
    if df_client['NAME_INCOME_TYPE_Maternity leave'].item()==1.0:
        incometype='Maternity leave'
    if df_client['NAME_INCOME_TYPE_Pensioner'].item()==1.0:
        incometype='Pensioner'
    if df_client['NAME_INCOME_TYPE_State servant'].item()==1.0:
        incometype='State servant'
    if df_client['NAME_INCOME_TYPE_Student'].item()==1.0:
        incometype='Student'
    if df_client['NAME_INCOME_TYPE_Unemployed'].item()==1.0:
        incometype='Unemployed'
    if df_client['NAME_INCOME_TYPE_Working'].item()==1.0:
        incometype='Working'
    st.write("Type de revenu :", incometype)
    if df_client['CODE_GENDER_F'].item()==1.0:
        gendertype='Women'
    if df_client['CODE_GENDER_M'].item()==1.0:
        gendertype='Men'
    st.write("Sexe :", gendertype)
    st.write("Nombre d'enfants :",df_client['CNT_CHILDREN'])
    nb_credits, salaire_moyen, credit_moyen = load_moyenne()
    st.write("Nombre de crédits:",(df_client.shape[0]))
    st.write("Salaire moyen :",(round(df_client["AMT_INCOME_TOTAL"].mean(), 2)))
    st.write("Valeur des crédits moyens:",(round(df_client["AMT_CREDIT"].mean(), 2)))
    plt.figure(figsize=(9, 9))
    st.subheader("Salaire par tranches")
    df_income = df[df["AMT_INCOME_TOTAL"] < 500000]
    df_tr=df_income
    df_tr["tranche"] = pd.cut(df["AMT_INCOME_TOTAL"], bins=10)
    df_tr = df_tr[["tranche","AMT_INCOME_TOTAL"]]
    df_tr.sort_values(by="AMT_INCOME_TOTAL", inplace=True)
    #print(df_tr)
    data_tr = df_tr["AMT_INCOME_TOTAL"]
    #print(data_tr)
    plt.figure(figsize=(9, 9))
    plt.hist(data_tr,density=True, edgecolor = 'k')
    plt.axvline(x=df_client["AMT_INCOME_TOTAL"].values, color="red", linestyle=":")
    plt.title('Salaire par tranche')
    plt.xlabel('Salaire')
    st.set_option('deprecation.showPyplotGlobalUse', False)
    st.pyplot()
    
    # Affichage prédiction solvabilité client
    st.header("Probabilité de défaut de paiement du client")
    url = 'http://127.0.0.1:5000/' + 'predict/' + str(id_clt)
    response = requests.get(url)
    content = json.loads(response.content.decode('utf-8'))
    prediction = content['prediction']
    st.write(round(prediction), "%")

    fig = go.Figure(go.Indicator(
    mode = "gauge+number",
    value = prediction,
    domain = {'x': [0, 1], 'y': [0, 1]},
    title = {'text': "Probabilité de défaut", 'font': {'size': 24}},
    gauge = {
        'axis': {'range': [None, 100], 'tickwidth': 1, 'tickcolor': "darkblue"},
        'bar': {'color': "darkblue"},
        'bgcolor': "white",
        'borderwidth': 2,
        'bordercolor': "gray",
        'steps': [
            {'range': [0, 50], 'color': 'cyan'},
            {'range': [50, 100], 'color': 'royalblue'}],
        'threshold': {
            'line': {'color': "red", 'width': 4},
            'thickness': 0.75,
            'value': 90}}))
    st.plotly_chart(fig)

    # Comparatif client proche
    clt_comp = st.radio("Scoring clients assimilés: ", ('Oui', 'Non')) 

    if (clt_comp=='Oui'):
        url_clt_comp = 'http://127.0.0.1:5000/' + 'assimiles/' + str(id_clt)
        req = requests.get(url_clt_comp)
        content = json.loads(req.content.decode('utf-8'))
        prediction_clt_comp = content['prediction']

        chart_data = pd.DataFrame([["client : "+str(id_clt),prediction],["clients similaires",prediction_clt_comp]],columns=['client','probabilité de défaut'])

        fig = px.bar(chart_data, x="client",y='probabilité de défaut', height=400,color = 'client')
        # st.dataframe(df) # if need to display dataframe
        st.plotly_chart(fig)

if __name__== '__main__':
    pret()